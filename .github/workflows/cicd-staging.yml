name: deploy staging

on:
  push:
    branches:
      - 'staging'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install

      - name: Inject environment variables
        run: |
          touch .env
          echo "NUXT_PUBLIC_BASE_URL=${{ secrets.NUXT_PUBLIC_BASE_URL_QA }}" >> .env
          # echo "NUXT_BASE_URL=${{secrets.NUXT_BASE_URL_QA}}" >> .env
          echo "MINIO_URL=${{ secrets.MINIO_URL }}" >> .env
          echo ${{ secrets.NUXT_BASE_URL_QA }}

      - name: Build project
        run: npm run build

      - name: Archive build files
        run: tar -czf build.tar.gz ./.output

      - name: Upload build files
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build files
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: ./build

      - name: Install SSH client
        run: sudo apt-get install -y openssh-client

      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - name: Connect to VPN
        uses: 'kota65535/github-openvpn-connect-action@v2'
        with:
          config_file: .github/workflows/sitst-client.ovpn
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}

      - name: Copy build files to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | sed 's/\\n/\n/g' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -p 22 ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Copy build files to VM
        run: |
          sshpass -p "${{ secrets.REMOTE_PASSWORD }}" scp -P 22 ./build/build.tar.gz ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/home/somsan/Gatherfy/staging/front

      - name: Deploy Docker container on VM
        env:
          REMOTE_PASSWORD: ${{ secrets.REMOTE_PASSWORD }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
        run: |
          sshpass -p "$REMOTE_PASSWORD" ssh -t -o StrictHostKeyChecking=no -p 22 -i ~/.ssh/id_rsa $REMOTE_USER@$REMOTE_HOST << 'EOF'
            cd /home/somsan/Gatherfy
            # tar -xzf build.tar.gz

            # docker stop gatherfy-web || true
            # docker rm gatherfy-web || true
            # docker build -t gatherfront:latest .
            # docker run -d --name gatherfy-web --network gatherfy_gatherfy-net --ip 192.162.100.154 -p 3000:3000 gatherfront:latest
            docker compose -f compose.staging.yml -p staging stop qafront
            docker compose -f compose.staging.yml -p staging up --build -d
